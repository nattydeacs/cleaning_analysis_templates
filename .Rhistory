xnorm <- x-mean
xnorm
mean(xnorm)
sd <- c(sd(x), sd(x), sd(x), sd(x), sd(x))
sd
xnorm/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean<- c(mean(x), mean(x),mean(x),mean(x),mean(x))
xnorm <- x-mean
sd <- c(sd(x), sd(x), sd(x), sd(x), sd(x))
xnorm/sd
swirl()
library(swirl)
Nat
rm(list=ls())
swirl()
fit<- lm(child ~ parent, galton)
sum(fit$residuals)^2/n-2
sqrt(sum(fit$residuals^2)/n-2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/ (n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
?deviance
deviance(sTot)
deviance(galton$child, galton$parent)
s
a <- Sum(2)
> sTot <- sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
sRese/sTot
sRes/sTot
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
library(swirl)
rm(list=ls())
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2<- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant-1, trees2)
lapply(list(fit, fit2), coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
summary(lm(mpg ~ wt, data = mtcars))
mean(mtcars$mpg)
mean(mtcars$mpg)-0.5591
head(mtcars)
mean(mtcars$mpg)
carslm <- summary(lm(mpg ~ wt, data = mtcars))
interval <_ mean(mtcars$mpg)*-5.3445+37.2851
interval <- mean(mtcars$mpg)*-5.3445+37.2851
interval
interval <- mean(mtcars$wt)*-5.3445+37.2851
interval
interval <- mean(mtcars$wt)*-5.3445+37.2851 + c(1,1)*0.5591
interval
c(1,1)*0.5591
interval <- mean(mtcars$wt)*-5.3445+37.2851 + c(-1,1)*0.5591
interval
interval <- mean(mtcars$wt)*-5.3445+37.2851 + c(-1,1)*1.8776
interval
carslm <- summary(lm(mpg ~ wt/1000, data = mtcars))
carslm <- summary(lm(mpg ~ wt, data = mtcars))
library(ggplot2)
ggplot(mtcars, aes(x=wt, y = mpg))+
geom_point() +
geom_smooth(fit="lm")
ggplot(mtcars, aes(x=wt, y = mpg))+
geom_point() +
geom_smooth(fit= "lm")
ggplot(mtcars, aes(x=wt, y = mpg))+
geom_point() +
geom_smooth(model= "lm")
?geom_smooth
ggplot(mtcars, aes(x=wt, y = mpg))+
geom_point() +
geom_smooth(stat= "lm")
library(ggplot2)
ggplot(mtcars, aes(x=wt, y = mpg))+
geom_point() +
geom_smooth(stat= "lm")
library(ggplot2)
ggplot(mtcars, aes(x=wt, y = mpg))+
geom_point() +
geom_smooth(method= "lm")
predict(carslm, newdata = 3, interval = 'confidence')
predict(carslm, newdata = 3, interval = 'confidence')
carslm <- lm(mpg ~ wt, data = mtcars)
predict(carslm, newdata = 3, interval = 'confidence')
predict(carslm, newdata = data.frame(newdata = 30), interval = 'confidence')
predict(carslm, newdata = data.frame(wt = 30), interval = 'confidence')
predict(carslm, newdata = data.frame(wt = 3), interval = 'confidence')
predict(carslm, newdata = data.frame(wt = 3), interval = 'prediction')
predict(carslm, newdata = data.frame(wt = mean(mtcars$wt)), interval = 'confidence')
predict(carslm, newdata = data.frame(wt = mean(2)), interval = 'prediction')
predict(carslm, newdata = data.frame(wt = 2), interval = 'prediction')
install.packages("treempap")
libary(treemap)
library(treemap)
install.packages("treempap")
library(treemap)
library(treempap)
install.packages("treempap")
library(ggplot2)
install.packages("treemapify")
library("treemapify")
class <- ("Upper Class", "Professional Class", "Suburban Middle Class",
"Working Class", "Criminalized Underclass")
shareOfPop <- c(0.001, .10, .25, .525, .12.5)
shareOfPop <- c(0.001, .10, .25, .525, .12.5)
shareOfPop <- c(0.001, .10, .25, .525, .12.5)
shareOfPop <- c(0.001, 0.10, 0.25, 0.525, 0.12.5)
class <- c("Upper Class", "Professional Class", "Suburban Middle Class",
"Working Class", "Criminalized Underclass")
shareOfPop <- c(0.001, 0.10, 0.25, 0.525, 0.12.5)
shareOfPop <- c(0.001, 0.10, 0.25, 0.525, 0.125)
sum(shareOfPop)
shareOfPop <- c(0.001, 0.10, 0.25, 0.525, 0.124)
sum(shareOfPop)
ggplot(df, aes(area = shareOfPop, fill = class)) +
geom_treemap()
data<- data.frame(class, shareOfPop)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap()
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class)
shareOfPop <- c(0.01, 0.10, 0.25, 0.525, 0.124)
data<- data.frame(class, shareOfPop)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class)
shareOfPop <- c(0.05, 0.10, 0.25, 0.525, 0.124)
data<- data.frame(class, shareOfPop)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class)
shareOfPop <- c(0.025, 0.10, 0.25, 0.525, 0.124)
data<- data.frame(class, shareOfPop)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class)
shareOfPop <- c(0.005, 0.10, 0.25, 0.525, 0.124)
data<- data.frame(class, shareOfPop)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, element_text(size = 12)) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, aes(element_text(size = 12))) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 15)) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11)) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 10)) +
theme(legend.position = "none")
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 22)) +
theme(legend.position = "none")
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 22) +
theme(legend.position = "none")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 12) +
theme(legend.position = "none")
shareOfPop <- c(0.01, 0.10, 0.25, 0.525, 0.124)
data<- data.frame(class, shareOfPop)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none")
NDColors <- c("#B0C0BF", "#332A21", "#64A1B4",
"#AE8988", "#C36733", "#DD7764",
"#602A10")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none") +
ggtitle("") +
scale_color_manual(NDColors)
NDColors <- c("#B0C0BF", "#332A21", "#64A1B4",
"#AE8988", "#C36733", "#DD7764",
"#602A10")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none") +
ggtitle("") +
scale_color_manual(NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none") +
ggtitle("")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(NDColors)
NDColors <- c("#B0C0BF", "#332A21", "#64A1B4",
"#AE8988", "#C36733", "#DD7764",
"#602A10")
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(values = NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11) +
theme(legend.position = "none", color = "white") +
ggtitle("") +
scale_fill_manual(values = NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11, color = "white") +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(values = NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11, color = "white", face = "bold") +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(values = NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11, color = "white", font = "bold") +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(values = NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 11, color = "white") +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(values = NDColors)
ggplot(data, aes(area = shareOfPop, fill = class)) +
geom_treemap() +
geom_treemap_text(label = class, size = 12, color = "white") +
theme(legend.position = "none") +
ggtitle("") +
scale_fill_manual(values = NDColors)
rm(list = ls())
getwd()
setwd("/Users/natdeacon/GitHub/cleaning_analysis_templates")
setwd("/Users/natdeacon/Deskto/GitHub/cleaning_analysis_templates")
#loading data
setwd("/Users/natdeacon/Desktop/GitHub/cleaning_analysis_templates")
#loading data
setwd("/Users/natdeacon/Desktop/GitHub/cleaning_analysis_templates/employment-data.csv")
#loading data
setwd("/Users/natdeacon/Desktop/GitHub/cleaning_analysis_templates")
df <- read.csv("/employment-data.csv")
df <- read.csv("employment-data.csv")
df <- df %>% mutate(Period = ym(Period))
#loading packages
library(dplyr) #for data maniupulation
library(lubridate) #for easy conversion of dates
df <- df %>% mutate(Period = ym(Period))
df <- df %>% mutate(Period = my(Period))
View(df)
?my
#loading data
df <- read.csv("employment-data.csv")
ym("2011.06")
df <- df %>% mutate(Period = ym(Period))
#loading data
df <- read.csv("employment-data.csv")
df <- df %>% mutate(Period = ym(Period))
#loading data
df <- read.csv("employment-data.csv")
ym(df$Period)
#loading data
df <- read.csv("employment-data.csv")
df$Period
#ym(df$Period)
ym(2017.03)
#ym(df$Period)
ym("2017.01")
df <- df %>% mutate(Period = ym(as.character(Period)))
df$Period
#remove rows with null values
dfSansNulls <- na.omit(df)
dfSansNulls
#remove columns with all null values
dfSansNullCols <- filter(function(df)!all(is.na(df)))
#remove columns with all null values
dfSansNullCols <- filter(function(x)!all(is.na(x)))
#remove columns with all null values
dfSansNullCols <- filter(function(x)!all(is.na(x)), df)
Filter(function(x)!all(is.na(x)), df)
#remove columns with all null values
dfSansNullCols <- filter(function(x)!all(is.na(x)), df)
#remove columns with all null values
dfSansNullCols <- Filter(function(x)!all(is.na(x)), df)
?Filter
#date conversion (see ymd function documentation)
#convert column from number to character to date
df <- df %>% mutate(Period = ym(as.character(Period)))
#loading data
df <- read.csv("employment-data.csv")
#remove columns containing only  null values
df<- Filter(function(x)!all(is.na(x)), df)
#remove rows with null values (all in this case)
df <- na.omit(df)
#filter df on condition
df <- df %>% filter(Series_title_2 == "Agriculture Forestry and Fishing")
#loading data
df <- read.csv("employment-data.csv")
#date conversion (see ymd function documentation)
#convert column from number to character to date
df <- df %>% mutate(Period = ym(as.character(Period)))
#remove columns containing only  null values
df<- Filter(function(x)!all(is.na(x)), df)
#remove rows with null values (all in this case)
df <- na.omit(df)
#filter df on condition
df <- df %>% filter(Series_title_2 == "Agriculture, Forestry and Fishing)
#filter df on condition
df <- df %>% filter(Series_title_2 == "Agriculture, Forestry and Fishing")
#filter df on condition
df <- df %>% filter(Series_title_2 == "Agriculture, Forestry and Fishing")
df <- df %>% select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2"))
#drop columns
df <- df %>% select(-("Series_title_2"))
View(df)
#drop column
df <- df %>% select(-"Series_title_2")
df <- read.csv("employment-data.csv")
###################################################
#Step 2: basic data exploration
###################################################
###################################################
#Step 3: cleaning data
###################################################
#date conversion (see ymd function documentation)
#convert column from number to character to date
df <- df %>% mutate(Period = ym(as.character(Period)))
#remove columns containing only  null values
df<- Filter(function(x)!all(is.na(x)), df)
#remove rows with null values (all in this case)
df <- na.omit(df)
#filter df on condition
df <- df %>% filter(Series_title_2 == "Agriculture, Forestry and Fishing")
#select columns
df <- df %>% select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2"))
#drop column
df <- df %>% select(-"Series_title_2")
#loading data
df <- read.csv("employment-data.csv")
#date conversion (see ymd function documentation)
#convert column from number to character to date
df <- df %>% mutate(Period = ym(as.character(Period)))
#remove columns containing only  null values
df<- Filter(function(x)!all(is.na(x)), df)
#remove rows with null values (all in this case)
df <- na.omit(df)
#filter df on condition
df <- df %>% filter(Series_title_2 == "Agriculture, Forestry and Fishing")
#select columns
df <- df %>% select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2"))
#drop column
df <- df %>% select(-"Series_title_2")
View(df)
df(names)
colnames(df)
#view columns names
colnames(df)
#view columns names and data types
dtypes(df)
#view columns names and data types
str(df)
table(df)
table(df$Subject)
table(df$Data_value)
table(df$Period)
#see unique of values within a variable
unique(df$Group)
#add calculated columns
df <- df %>% mutate(Data_value_sqrt = sqrt(Data_value))
df <- df %>% mutate(Period = ym(as.character(Period))) %>%
Filter(function(x)!all(is.na(x)), df)
df <- df %>% mutate(Period = ym(as.character(Period))) %>%
Filter(function(x)!all(is.na(x)))
#in one chain
df <- read.csv("employment-data.csv")
df <- df %>% mutate(Period = ym(as.character(Period)))  %>%
df <- df %>% mutate(Period = ym(as.character(Period))) %>%
filter(Series_title_2 == "Agriculture, Forestry and Fishing") %>%
select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2")) %>%
select(-"Series_title_2") %>% #irl you'd just not select this column in the line above
mutate(Data_value_sqrt = sqrt(Data_value))
#loading packages
library(dplyr) #for data maniupulation
#in one chain
df <- read.csv("employment-data.csv")
df <- df %>% mutate(Period = ym(as.character(Period))) %>%
filter(Series_title_2 == "Agriculture, Forestry and Fishing") %>%
select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2")) %>%
select(-"Series_title_2") %>% #irl you'd just not select this column in the line above
mutate(Data_value_sqrt = sqrt(Data_value))
#loading data
df <- read.csv("employment-data.csv")
#view columns names
colnames(df)
#view columns names and data types
str(df)
###################################################
#Step 1: loading packages and data
###################################################
#loading packages
library(dplyr) #for data maniupulation
library(lubridate) #for easy conversion of dates
#loading data
df <- read.csv("employment-data.csv")
###################################################
#Step 2: basic data exploration
###################################################
#view columns names
colnames(df)
#view columns names and data types
str(df)
#see counts of values within a variable
table(df$Period)
#see unique of values within a variable
unique(df$Group)
###################################################
#Step 3: cleaning data
###################################################
#date conversion (see ymd function documentation)
#convert column from number to character to date
df <- df %>% mutate(Period = ym(as.character(Period)))
#remove columns containing only  null values
df<- Filter(function(x)!all(is.na(x)), df)
#remove rows with null values (all in this case)
df <- na.omit(df)
#filter df on conditions
df <- df %>% filter(Series_title_2 == "Agriculture, Forestry and Fishing" |
Series_title_2 == "Mining")
#select columns
df <- df %>% select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2"))
#drop column
df <- df %>% select(-"Series_title_1")
#add calculated columns
df <- df %>% mutate(Data_value_sqrt = sqrt(Data_value))
#in one chain
df <- read.csv("employment-data.csv")
df <- df %>% mutate(Period = ym(as.character(Period))) %>%
filter(Series_title_2 == "Agriculture, Forestry and Fishing") %>%
select(c("Period", "Data_value", "Subject", "Group",
"Series_title_1", "Series_title_2")) %>%
select(-"Series_title_1") %>% #irl you'd just not select this column in the line above
mutate(Data_value_sqrt = sqrt(Data_value))
df <- na.omit(df)
df<- Filter(function(x)!all(is.na(x)), df)
